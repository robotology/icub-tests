name: Continuous Integration with conda dependencies

on:
  push:
    branches:
    - 'master'
    - 'devel'
    - 'feat/**'
    - 'fix/**'
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC 
  - cron:  '0 2 * * *'
  workflow_dispatch:
    
jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest, windows-2019, macos-latest]

    steps:
    - uses: actions/checkout@main

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        channels: conda-forge,robotology
        channel-priority: true

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Workaround for https://github.com/conda-incubator/setup-miniconda/issues/186
        conda config --remove channels defaults
        # Compilation related dependencies
        conda install cmake compilers make ninja pkg-config
        # Actual dependencies
        conda install ycm-cmake-modules yarp opencv idyntree robot-testing-framework icub-main robometry

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DICUB_TESTS_COMPILES_IMU_TEST=ON ..

    - name: Configure [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -G"Visual Studio 16 2019" -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DICUB_TESTS_COMPILES_IMU_TEST=ON ..
      
    - name: Build
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --target install
